From 31134d0d290a90fb028409db4190d874724a27c7 Mon Sep 17 00:00:00 2001
From: Alberto Valverde <alberto@toscat.net>
Date: Thu, 7 Jul 2016 01:34:14 +0200
Subject: [PATCH 7/9] Use named pipes to communicate with iserv.

This makes it easier to call it through an emulator to cross-compile TH
---
 compiler/ghci/GHCi.hs    | 74 ++++++++++++++++++++++++------------------------
 iserv/iserv-bin.cabal    |  1 -
 iserv/src/GHCi/Utils.hsc | 25 ----------------
 iserv/src/Main.hs        | 34 ++++++++++++++++------
 4 files changed, 62 insertions(+), 72 deletions(-)
 delete mode 100644 iserv/src/GHCi/Utils.hsc

diff --git a/compiler/ghci/GHCi.hs b/compiler/ghci/GHCi.hs
index a31342f..d2dcaf1 100644
--- a/compiler/ghci/GHCi.hs
+++ b/compiler/ghci/GHCi.hs
@@ -61,6 +61,7 @@ import Exception
 import BasicTypes
 import FastString
 import Util
+import SysTools
 
 import Control.Concurrent
 import Control.Monad
@@ -73,11 +74,12 @@ import Data.IORef
 import Foreign hiding (void)
 import GHC.Stack.CCS (CostCentre,CostCentreStack)
 import System.Exit
+import System.IO
 import Data.Maybe
 import GHC.IO.Handle.Types (Handle)
+import GHC.IO.Handle.FD (openFileBlocking)
 #ifdef mingw32_HOST_OS
 import Foreign.C
-import GHC.IO.Handle.FD (fdToHandle)
 #else
 import System.Posix as Posix
 #endif
@@ -442,16 +444,7 @@ startIServ dflags = do
         | otherwise = ""
       iserv = pgm_i dflags ++ flavour ++ iservExtension
       iserv_opts = getOpts dflags opt_i
-      emulated = platformIsCrossCompiling . sTargetPlatform . settings $ dflags
-      (prog, opts, msg)
-        | emulated = ( pgm_e dflags
-                     , iserv : iserv_opts
-                     , text "Starting " <> text iserv <>
-                       text " via " <> text (pgm_e dflags)
-                     )
-        | otherwise = (iserv, iserv_opts, text "Starting " <> text iserv)
-  debugTraceMsg dflags 3 msg
-  (ph, rh, wh) <- runWithPipes prog opts
+  (ph, rh, wh) <- runWithPipes dflags iserv iserv_opts
   lo_ref <- newIORef Nothing
   cache_ref <- newIORef emptyUFM
   return $ IServ
@@ -485,41 +478,48 @@ stopIServ HscEnv{..} =
        then return ()
        else iservCall iserv Shutdown
 
-runWithPipes :: FilePath -> [String] -> IO (ProcessHandle, Handle, Handle)
+runWithPipes :: DynFlags -> FilePath -> [String]
+             -> IO (ProcessHandle, Handle, Handle)
+runWithPipes dflags prog opts = do
+    debugTraceMsg dflags 3 startMsg
+    rPath <- newTempName dflags "rfifo"
+    wPath <- newTempName dflags "wfifo"
+    addFilesToClean dflags [wPath, rPath]
+
+    createNamedPipe' rPath
+    createNamedPipe' wPath
+
+    let (prog', args) = case mEmulator of 
+                          Just emu -> (emu,  prog : rPath : wPath : opts)
+                          Nothing  -> (prog,        rPath : wPath : opts)
+    (_, _, _, ph) <- createProcess (proc prog' args)
+    -- The order in which we open the pipes must be the same at the other end or
+    -- we'll deadlock
+    wh <- openFileBlocking wPath WriteMode
+    rh <- openBinaryFile rPath ReadMode
+    hSetBinaryMode wh True
+    hSetBuffering wh NoBuffering
+    hSetBuffering rh NoBuffering
+    return (ph, rh, wh)
+ where
+  emulated = platformIsCrossCompiling . sTargetPlatform . settings $ dflags
+  mEmulator = if emulated then Just (pgm_e dflags) else Nothing
+  startMsg = text "Starting " <> text prog
+     <> case mEmulator of {Just e -> text " via " <> text e; Nothing -> text ""}
+
+createNamedPipe' :: FilePath -> IO ()
 #ifdef mingw32_HOST_OS
 foreign import ccall "io.h _close"
    c__close :: CInt -> IO CInt
 
 foreign import ccall unsafe "io.h _get_osfhandle"
    _get_osfhandle :: CInt -> IO CInt
-
-runWithPipes prog opts = do
-    (rfd1, wfd1) <- createPipeFd -- we read on rfd1
-    (rfd2, wfd2) <- createPipeFd -- we write on wfd2
-    wh_client    <- _get_osfhandle wfd1
-    rh_client    <- _get_osfhandle rfd2
-    let args = show wh_client : show rh_client : opts
-    (_, _, _, ph) <- createProcess (proc prog args)
-    rh <- mkHandle rfd1
-    wh <- mkHandle wfd2
-    return (ph, rh, wh)
-      where mkHandle :: CInt -> IO Handle
-            mkHandle fd = (fdToHandle fd) `onException` (c__close fd)
+createNamedPipe' = error "createNamedPipe: work in progres..."
 #else
-runWithPipes prog opts = do
-    (rfd1, wfd1) <- Posix.createPipe -- we read on rfd1
-    (rfd2, wfd2) <- Posix.createPipe -- we write on wfd2
-    setFdOption rfd1 CloseOnExec True
-    setFdOption wfd2 CloseOnExec True
-    let args = show wfd1 : show rfd2 : opts
-    (_, _, _, ph) <- createProcess (proc prog args)
-    closeFd wfd1
-    closeFd rfd2
-    rh <- fdToHandle rfd1
-    wh <- fdToHandle wfd2
-    return (ph, rh, wh)
+createNamedPipe' = flip Posix.createNamedPipe ownerModes
 #endif
 
+
 -- -----------------------------------------------------------------------------
 {- Note [External GHCi pointers]
 
diff --git a/iserv/iserv-bin.cabal b/iserv/iserv-bin.cabal
index e0bc843..b6020bd 100644
--- a/iserv/iserv-bin.cabal
+++ b/iserv/iserv-bin.cabal
@@ -17,7 +17,6 @@ Executable iserv
     Main-Is: Main.hs
     C-Sources: cbits/iservmain.c
     Hs-Source-Dirs: src
-    Other-Modules: GHCi.Utils
     Build-Depends: array      >= 0.5 && < 0.6,
                    base       >= 4   && < 5,
                    binary     >= 0.7 && < 0.9,
diff --git a/iserv/src/GHCi/Utils.hsc b/iserv/src/GHCi/Utils.hsc
deleted file mode 100644
index b90cfac..0000000
--- a/iserv/src/GHCi/Utils.hsc
+++ /dev/null
@@ -1,25 +0,0 @@
-{-# LANGUAGE CPP #-}
-module GHCi.Utils
-    ( getGhcHandle
-    ) where
-
-import Foreign.C
-import GHC.IO.Handle (Handle())
-#ifdef mingw32_HOST_OS
-import GHC.IO.Handle.FD (fdToHandle)
-#else
-import System.Posix
-#endif
-
-#include <fcntl.h>     /* for _O_BINARY */
-
--- | Gets a GHC Handle File description from the given OS Handle or POSIX fd.
-getGhcHandle :: CInt -> IO Handle
-#ifdef mingw32_HOST_OS
-getGhcHandle handle = _open_osfhandle handle (#const _O_BINARY) >>= fdToHandle
-
-foreign import ccall "io.h _open_osfhandle" _open_osfhandle ::
-    CInt -> CInt -> IO CInt
-#else
-getGhcHandle fd     = fdToHandle $ Fd fd
-#endif
diff --git a/iserv/src/Main.hs b/iserv/src/Main.hs
index 46ae82b..16a8a1f 100644
--- a/iserv/src/Main.hs
+++ b/iserv/src/Main.hs
@@ -1,11 +1,11 @@
-{-# LANGUAGE RecordWildCards, GADTs, ScopedTypeVariables, RankNTypes #-}
+{-# LANGUAGE RecordWildCards, GADTs, ScopedTypeVariables, RankNTypes, CPP #-}
 module Main (main) where
 
 import GHCi.Run
 import GHCi.TH
 import GHCi.Message
 import GHCi.Signals
-import GHCi.Utils
+import GHC.IO.Handle.FD (openFileBlocking)
 
 import Control.DeepSeq
 import Control.Exception
@@ -14,22 +14,38 @@ import Data.Binary
 import Data.IORef
 import System.Environment
 import System.Exit
+import System.IO
 import Text.Printf
 
 main :: IO ()
 main = do
-  (arg0:arg1:rest) <- getArgs
-  let wfd1 = read arg0; rfd2 = read arg1
+  (wFifo:rFifo:rest) <- getArgs
   verbose <- case rest of
     ["-v"] -> return True
     []     -> return False
-    _      -> die "iserv: syntax: iserv <write-fd> <read-fd> [-v]"
+    _      -> die "iserv: syntax: iserv <write-fifo> <read-fifo> [-v]"
   when verbose $ do
-    printf "GHC iserv starting (in: %d; out: %d)\n"
-      (fromIntegral rfd2 :: Int) (fromIntegral wfd1 :: Int)
-  inh  <- getGhcHandle rfd2
-  outh <- getGhcHandle wfd1
+    printf "GHC iserv starting (in: %s; out: %s)\n" rFifo wFifo
   installSignalHandlers
+#if defined(mingw32_HOST_OS)
+  -- When cross-compiling we need to preload these DLLs since base depends
+  -- on symbols defined in them.
+  -- Interestingly, running ghc-iserv.exe with "+RTS -Dl" shows that ghc
+  -- sends FindSystemLibrary requests looking for them but for some reason
+  -- never sends LoadDLL requests for them.
+  mapM_ (run . LoadDLL)
+    [ "shell32"   -- for _CommandLineToArgvW
+    , "wsock32"   -- for _recv
+    ]
+#endif
+  -- The order in which we open the pipes must be the same at the other end or
+  -- we'll deadlock
+  inh <- openBinaryFile rFifo ReadMode
+  outh <- openFileBlocking wFifo WriteMode
+  hSetBinaryMode outh True
+  hSetBuffering inh NoBuffering
+  hSetBuffering outh NoBuffering
+
   lo_ref <- newIORef Nothing
   let pipe = Pipe{pipeRead = inh, pipeWrite = outh, pipeLeftovers = lo_ref}
   uninterruptibleMask $ serv verbose pipe
-- 
2.7.4

