From 3fe986367f1aa935f85d208563ba9d7e9e43ac99 Mon Sep 17 00:00:00 2001
From: Alberto Valverde <alberto@toscat.net>
Date: Tue, 5 Jul 2016 22:19:16 +0200
Subject: [PATCH 5/9] Use an emulator to run the external interpreter when
 cross-compiling

---
 compiler/ghci/GHCi.hs     | 24 +++++++++++++++++++++---
 compiler/main/DynFlags.hs | 10 +++++++++-
 compiler/main/SysTools.hs |  2 ++
 configure.ac              |  1 -
 settings.in               |  3 ++-
 5 files changed, 34 insertions(+), 6 deletions(-)

diff --git a/compiler/ghci/GHCi.hs b/compiler/ghci/GHCi.hs
index 7097e66..a31342f 100644
--- a/compiler/ghci/GHCi.hs
+++ b/compiler/ghci/GHCi.hs
@@ -53,6 +53,7 @@ import GHCi.BreakArray (BreakArray)
 import HscTypes
 import UniqFM
 import Panic
+import Platform
 import DynFlags
 import ErrUtils
 import Outputable
@@ -439,9 +440,17 @@ startIServ dflags = do
         | WayProf `elem` ways dflags = "-prof"
         | WayDyn `elem` ways dflags = "-dyn"
         | otherwise = ""
-      prog = pgm_i dflags ++ flavour
-      opts = getOpts dflags opt_i
-  debugTraceMsg dflags 3 $ text "Starting " <> text prog
+      iserv = pgm_i dflags ++ flavour ++ iservExtension
+      iserv_opts = getOpts dflags opt_i
+      emulated = platformIsCrossCompiling . sTargetPlatform . settings $ dflags
+      (prog, opts, msg)
+        | emulated = ( pgm_e dflags
+                     , iserv : iserv_opts
+                     , text "Starting " <> text iserv <>
+                       text " via " <> text (pgm_e dflags)
+                     )
+        | otherwise = (iserv, iserv_opts, text "Starting " <> text iserv)
+  debugTraceMsg dflags 3 msg
   (ph, rh, wh) <- runWithPipes prog opts
   lo_ref <- newIORef Nothing
   cache_ref <- newIORef emptyUFM
@@ -454,6 +463,15 @@ startIServ dflags = do
     , iservPendingFrees = []
     }
 
+-- We cannot rely on System.Directory.exeExtension because it is configured for
+-- the host system
+iservExtension :: String
+#if defined(mingw32_TARGET_OS)
+iservExtension = ".exe"
+#else
+iservExtension = ""
+#endif
+
 stopIServ :: HscEnv -> IO ()
 stopIServ HscEnv{..} =
   gmask $ \_restore -> do
diff --git a/compiler/main/DynFlags.hs b/compiler/main/DynFlags.hs
index 6a4737e..95a3227 100644
--- a/compiler/main/DynFlags.hs
+++ b/compiler/main/DynFlags.hs
@@ -73,7 +73,7 @@ module DynFlags (
         versionedAppDir,
         extraGccViaCFlags, systemPackageConfig,
         pgm_L, pgm_P, pgm_F, pgm_c, pgm_s, pgm_a, pgm_l, pgm_dll, pgm_T,
-        pgm_windres, pgm_libtool, pgm_lo, pgm_lc, pgm_i,
+        pgm_windres, pgm_libtool, pgm_lo, pgm_lc, pgm_i, pgm_e,
         opt_L, opt_P, opt_F, opt_c, opt_a, opt_l, opt_i,
         opt_windres, opt_lo, opt_lc,
 
@@ -958,6 +958,7 @@ data Settings = Settings {
   sPgm_lo                :: (String,[Option]), -- LLVM: opt llvm optimiser
   sPgm_lc                :: (String,[Option]), -- LLVM: llc static compiler
   sPgm_i                 :: String,
+  sPgm_e                 :: String,
   -- options for particular phases
   sOpt_L                 :: [String],
   sOpt_P                 :: [String],
@@ -1021,6 +1022,8 @@ pgm_lc                :: DynFlags -> (String,[Option])
 pgm_lc dflags = sPgm_lc (settings dflags)
 pgm_i                 :: DynFlags -> String
 pgm_i dflags = sPgm_i (settings dflags)
+pgm_e                 :: DynFlags -> String
+pgm_e dflags = sPgm_e (settings dflags)
 opt_L                 :: DynFlags -> [String]
 opt_L dflags = sOpt_L (settings dflags)
 opt_P                 :: DynFlags -> [String]
@@ -2374,6 +2377,8 @@ dynamic_flags_deps = [
       (hasArg (\f -> alterSettings (\s -> s { sPgm_lc  = (f,[])})))
   , make_ord_flag defFlag "pgmi"
       (hasArg (\f -> alterSettings (\s -> s { sPgm_i  =  f})))
+  , make_ord_flag defFlag "pgme"
+      (hasArg (\f -> alterSettings (\s -> s { sPgm_e  =  f})))
   , make_ord_flag defFlag "pgmL"
       (hasArg (\f -> alterSettings (\s -> s { sPgm_L   = f})))
   , make_ord_flag defFlag "pgmP"
@@ -3626,7 +3631,10 @@ defaultFlags settings
 
     ++ concatMap (wayGeneralFlags platform) (defaultWays settings)
 
+    ++ (if needsExternalInterpreter then [Opt_ExternalInterpreter] else [])
+
     where platform = sTargetPlatform settings
+          needsExternalInterpreter = platformIsCrossCompiling platform
 
 default_PIC :: Platform -> [GeneralFlag]
 default_PIC platform =
diff --git a/compiler/main/SysTools.hs b/compiler/main/SysTools.hs
index 9423b00..eca8847 100644
--- a/compiler/main/SysTools.hs
+++ b/compiler/main/SysTools.hs
@@ -318,6 +318,7 @@ initSysTools mbMinusB
        lo_prog <- getSetting "LLVM opt command"
 
        let iserv_prog = libexec "ghc-iserv"
+       emulator_prog <- getSetting "Cross-compile emulator command"
 
        let platform = Platform {
                           platformArch = targetArch,
@@ -359,6 +360,7 @@ initSysTools mbMinusB
                     sPgm_lo  = (lo_prog,[]),
                     sPgm_lc  = (lc_prog,[]),
                     sPgm_i   = iserv_prog,
+                    sPgm_e   = emulator_prog,
                     sOpt_L       = [],
                     sOpt_P       = [],
                     sOpt_F       = [],
diff --git a/configure.ac b/configure.ac
index 084d14e..49275e5 100644
--- a/configure.ac
+++ b/configure.ac
@@ -459,7 +459,6 @@ AC_ARG_WITH([emulator],
   [CrossCompileEmulator="$withval"])
 AC_SUBST(CrossCompileEmulator)
 
-
 dnl ** Which gcc to use?
 dnl --------------------------------------------------------------
 FIND_GCC([WhatGccIsCalled], [gcc], [gcc])
diff --git a/settings.in b/settings.in
index e8cdad3..1668126 100644
--- a/settings.in
+++ b/settings.in
@@ -27,6 +27,7 @@
  ("target has subsections via symbols", "@HaskellHaveSubsectionsViaSymbols@"),
  ("Unregisterised", "@Unregisterised@"),
  ("LLVM llc command", "@SettingsLlcCommand@"),
- ("LLVM opt command", "@SettingsOptCommand@")
+ ("LLVM opt command", "@SettingsOptCommand@"),
+ ("Cross-compile emulator command", "@CrossCompileEmulator@")
  ]
 
-- 
2.7.4

